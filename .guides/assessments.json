[
 {
  "type": "test",
  "taskId": "test-2161152439",
  "source": {
   "name": "custom code test example",
   "showName": false,
   "instructions": "## Coding Exercise\n\nWrite a program that outputs `Hello world`. Your program must do the following things:\n\n* Use two variables, one with `Hello ` and the other with `world`.\n* Use a single print statement.",
   "command": "python3 .guides/custom_test_script.py",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 40,
   "guidance": "There are many ways to solve this problem. The key is to use the `+` operator so you can concatenate the two string variables so that you only need one print statement. Here is on possible solution.\n\n```python\nvar_1 = \"Hello\"\nvar_2 = \" world\"\nprint(var_1 + var_2)\n```",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/custom_test.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/custom_test.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-3211802000",
  "source": {
   "name": "Style Checker",
   "showName": true,
   "instructions": "Click the button below to check the style of your code.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"style\",\"files\":[\"student_code/code_style.py\"],\"partialPoints\":false,\"maxPoints\":1}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "Keep the following things in mind when writing Python code:\n\n* Only one import statement per line\n* Blank lines should not have any whitespace\n* Do not put whitespace after a `(`\n* Do not put whitespace before a `)`",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": true,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     "student_code/code_style.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": "student_code/code_style.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 },
 {
  "type": "test",
  "taskId": "test-2633892246",
  "source": {
   "name": "Unit Test Example",
   "showName": true,
   "instructions": "Write a function called `circle_area` that takes a parameter for the radius. The function should return the area of a circle for the given radius. Your program should raise an error when the wrong data type is passed to the function, and it should raise an error when a negative number is passed to `circle_area`.\n\nSubmit your code to be evaluated.",
   "command": "python /usr/share/codio/assessments/assessments.py",
   "codeEnvConfig": "{\"type\":\"python\",\"subtype\":\"unittest\",\"files\":[\".guides/test_circle_area.py\"],\"partialPoints\":false,\"maxPoints\":1,\"executable\":\"python3\",\"pythonwd\":\".guides/\"}",
   "arePartialPointsAllowed": false,
   "timeoutSeconds": 300,
   "guidance": "Here is one possible solution:\n\n```python\nimport unittest\nfrom circle import circle_area\nfrom math import pi\n\nclass TestCircleArea(unittest.TestCase):\n  def test_area(self):\n    self.assertAlmostEqual(circle_area(1), pi)\n    self.assertAlmostEqual(circle_area(0), 0)\n    self.assertAlmostEqual(circle_area(2.1), pi * 2.1 ** 2)\n    \n  def test_values(self):\n    self.assertRaises(ValueError, circle_area, -2)\n    \n  def test_types(self):\n    self.assertRaises(TypeError, circle_area, 3+5j)\n    self.assertRaises(TypeError, circle_area, True)\n    self.assertRaises(TypeError, circle_area, \"radius\")\n```\n\nYour test should test several valid radii. In addition, check fora **value error** when a negative number is passed to `circle_area`. Lastly, check for a **type error** when the wrong data type is passed to `circle_area`.",
   "showGuidanceAfterResponse": true,
   "points": 1,
   "oneTimeTest": false,
   "metadata": {
    "tags": [
     {
      "name": "Assessment Type",
      "value": "Advanced Code Test"
     }
    ],
    "files": [
     ".guides/circle.py",
     "student_code/circle.py"
    ],
    "opened": [
     {
      "type": "file",
      "panelNumber": 0,
      "content": ".guides/circle.py"
     }
    ]
   },
   "bloomsObjectiveLevel": "",
   "learningObjectives": ""
  }
 }
]